package personal.cx.point.data.file

import personal.cx.point.exception.PointRuntimeException
import java.util.concurrent.locks.ReentrantLock

class downloadFileData {
    data class libraryDatabase(
        val id: Int,
        
        val name: String,
        val ip: String,
        
        val password: String,

        var libraryType: Int,

        var files: fileData?
    )

    private var lock = ReentrantLock()
    private var database = mutableListOf<libraryDatabase>()

    //inner function

    private fun copyLibrary(goalLibrary: libraryDatabase) : libraryDatabase{
        lock.lock()

        val tempLibrary : libraryDatabase = libraryDatabase(
            goalLibrary.id,
            goalLibrary.name,
            goalLibrary.ip,
            "",
            goalLibrary.libraryType,
            goalLibrary.files
        )

        lock.unlock()

        return tempLibrary
    }

    //ports

    //以下获取元素的函数均会消去password信息
    //The following functions for obtaining elements will eliminate password information
    fun libraryList() : List<libraryDatabase> {
        lock.lock()

        var returnList = mutableListOf<libraryDatabase>()
        for(i in database){
            lock.unlock()

            returnList.add(copyLibrary(i))

            lock.lock()
        }

        lock.unlock()

        return returnList.toList()
    }
    fun library(id : Int) : libraryDatabase?{
        val element = findById(id)
        if(element != null){
            return copyLibrary(element)
        }

        return null
    }

    fun size(): Int {
        lock.lock()

        val size = database.size

        lock.unlock()

        return size
    }
    
    
    //通过该函数来获取密码
    fun password(id : Int) : String?{
        lock.lock()

        val element = findById(id)
        var pw : String? = null
        if(element != null){
            pw = element.password
        }

        lock.unlock()

        return pw
    }

    fun add(name : String, ip : String, password : String, libraryType : Int){
    	    var element = libraryDatabase(size(),name, ip, password, libraryType, null)
    	    database.add(element)
    }
    fun addByLibrary(elements : List<libraryDatabase>){
        var ifExit = 0
        var element : libraryDatabase? = null

        lock.lock()

        for(i in elements){
            for(j in database){
                if(i.ip == j.ip && i.name == j.name){
                    ifExit = 1
                    element = j
                }
            }
            if(ifExit == 1){
                if(element == null){
                    throw PointRuntimeException("Error: type/file/shareFileData - class downloadFileData - fun reSet 逻辑错误")
                }
            }
            else{
                database.add(i)
            }
            ifExit = 0
        }

        lock.unlock()
    }
    fun addByString(data : String, ip : String){
        //TODO 暂不处理
    }
    fun setFiles(id : Int, fileData: fileData){
        val element = findById(id)

        lock.lock()

        if(element != null){
            element.files = fileData
        }

        lock.unlock()
    }
    //basic data manage
    fun setLibraryType(id: Int, num: Int) {
        val element = findById(id)

        lock.lock()

        if(element != null){
            element.libraryType = num
        }

        lock.unlock()
    }
    fun change(data: List<libraryDatabase>) {
        lock.lock()

        database = data.toMutableList()

        lock.unlock()
    }

    //tool functions
    fun getElementById(id : Int): libraryDatabase? {

        lock.lock()

        for(i in database){
            if(i.id == id){
                lock.unlock()
                return i
            }
        }

        lock.unlock()

        return null
    }
    fun searchElementByName(name: String, area: Int = 0): List<libraryDatabase> {
                val listReturn = mutableListOf<libraryDatabase>()
                        lock.lock()
                                try {
                                            // 步骤1：筛选所有名称「包含」目标 name 的库（消去密码，线程安全）
                                                        for (lib in database) {
                                                                        // 忽略大小写匹配（如需严格大小写，去掉 equalsIgnoreCase）
                                                                                        if (lib.name.contains(name, ignoreCase = true)) {
                                                                                                            listReturn.add(copyLibrary(lib)) // copyLibrary 自动清空密码
                                                                                                                            }
                                                                                                                                        }

                                                                                                                                                    // 步骤2：在结果中查找「精确匹配」的库，移至列表首位
                                                                                                                                                                val exactMatchIndex = listReturn.indexOfFirst { 
                                                                                                                                                                                it.name.equals(name, ignoreCase = true) 
                                                                                                                                                                                            }
                                                                                                                                                                                                        if (exactMatchIndex != -1 && exactMatchIndex != 0) {
                                                                                                                                                                                                                        // 移除精确匹配项，插入到头部
                                                                                                                                                                                                                                        val exactMatchLib = listReturn.removeAt(exactMatchIndex)
                                                                                                                                                                                                                                                        listReturn.add(0, exactMatchLib)
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                            } finally {
                                                                                                                                                                                                                                                                                        lock.unlock() // 确保锁释放
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                        return listReturn.toList()
                                                                                                                                                                                                                                                                                                            }
    }
    fun searchElementByName(name: String, area: Int = 0): List<libraryDatabase> {
        var listReturn = mutableListOf<libraryDatabase>()

        lock.lock()

        for(i in database){
            //TODO 先进行包含匹配，筛出所有包含name: String的libraryDatabase的可变列表，再在这个可变列表中进行精确匹配，看是否有完全与name一致的项，把它移动至可变列表的第一位
        }

        lock.unlock()

        return listReturn.toList()
    }
}